snippet bfun
	${1:(${2:args}) }=>
	    ${3:# body...}

snippet cla
	class ${1:ClassName}${2: extends ${3:Ancestor}}
	    ${4:constructor: (${5:args}) ->
  	      ${6:# body...}}
  	    $7

snippet elif
	else if ${1:condition}
	    ${2:# body...}

snippet fora
	for ${1:name} in ${2:array}
	    ${3:# body...}

snippet foro
	for ${1:key}, ${2:value} of ${3:Object}
	    ${0:# body...}

snippet forr
	for ${1:name} in [${2:start}..${3:finish}]${4: by ${5:step}}
	    ${6:# body...}

snippet forrex
	for ${1:name} in [${2:start}...${3:finish}]${4: by ${5:step}}
	    ${6:# body...}

snippet fun
	${1:name} = (${2:args}) ->
	    ${3:# body...}

snippet if
	if ${1:condition}
	    ${2:# body...}

snippet ife
	if ${1:condition}
	  ${2:# body...}
	else
	  ${3:# body...}

snippet ifte
	if ${1:condition} then ${2:value} else ${3:other}

snippet swi
	switch ${1:object}
	  when ${2:value}
	    ${0:# body...}

snippet try
	try
	  $1
	catch ${2:error}
	  $3

snippet unl
	${1:action} unless ${2:condition}

snippet desc
	describe "${1}", ->
	  it "${2}", ->
	    ${3}

snippet ex
	expect(${1}).to${2:Match}(${3})

snippet $
	$(${1})

snippet it
	it "${1}", ->
	  ${2}

snippet log
	console.log(${1})

snippet bbv
	class window.${1:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`}View extends Backbone.View
	  events: {
	    
	  }
	  
	  initialize: (options) ->
	      
	  render: => 
	    @el.html(JST[''](@viewData()))

	  viewData: =>
	    {}

snippet bbm
	class window.${1:`substitute(substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g'), 's$', '', 'g')`} extends Backbone.Model
		${2}
	class window.${3:`substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} extends Backbone.Collection
	  model: `substitute(substitute(Filename(), '\(_\|^\)\(.\)', '\u\2', 'g'), 's$', '', 'g')`
	  url: "/api/beta/`Filename()`"
	  parse: (json) =>
	    json.`Filename()`
